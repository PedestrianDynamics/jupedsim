============

to think about:
is there a way move do_intersect(Circle3,Circle3) to Intersection package?
(no use of sqrt?)

============
nettoyer 
Solve 
critical points

============
(?) ajouter 
-	Function Object Concept SphericalKernel::ConstructLine_3
	Line_3 fo.operator()(Circular_arc_point_3 p1, Circular_arc_point_3 p2)
- same for Line_arc_3

============
---- from Daniel

- the arc point/plane orientation--I can't publicly get a  Root_for_spheres_2_3 back from a circular_arc_point so I can't  implement it myself either
- a way of getting a line through a circular_arc_point. I think I  really need this, at least I use it extensively and don't see an  obvious way around it.


- the ability to negate a particular coordinate of a arc point--this  is a bit idiosyncratic, perhaps the ability to apply some subclass of  affine transform

- the output iterator based intersect is even more annoying than the  normal intersect. 
============


? deplacer       
typedef std::pair< Polynomial_for_spheres_2_3, Polynomial_1_3 >
                                                 Polynomials_for_circle_3;
dans AK ? (c'est dans SK)

----------

filtered bbox kernel (voir TODO CK2)

changer les noms des polynomes (cercles et droites) dans le code... 

--> a transferer dans linear kernel 
        - unoriented equal (pb general orientation dans noyau cgal...)

intersection arcs/triangle

spherical patch 'triangle'...
(NB: package Curved_kernel dans branch/cannot_wait...)
